| 05-08 12:42:03 EXPERIMENT BEGIN: 
| 05-08 12:42:03 logging into exp/qm9/edp-gnn_QM9__May-08-12-42-03_3864212/info.log
| 05-08 12:42:26 model: EdgeDensePredictionGraphScoreNetwork(
  (gnn_list): ModuleList(
    (0): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=11, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=32, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=22, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=32, bias=True)
              (1): Linear(in_features=32, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=4, bias=True)
          (1): Linear(in_features=4, out_features=4, bias=True)
          (2): Linear(in_features=4, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(4, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (1): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=18, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=36, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=36, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=36, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=32, out_features=36, bias=True)
              (1): Linear(in_features=36, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=34, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (2): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=36, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (3): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=36, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=4, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
    (4): EdgeDensePredictionGNNLayer(
      (multi_channel_gnn_module): GIN(
        (linear_prediction): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=20, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=16, bias=True)
          )
          (1): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=16, bias=True)
          )
          (2): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=16, bias=True)
          )
          (3): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=16, bias=True)
          )
          (4): Sequential(
            (0): Linear(in_features=16, out_features=40, bias=True)
            (1): LeakyReLU(negative_slope=0.01)
            (2): Linear(in_features=40, out_features=16, bias=True)
          )
        )
        (layers): ModuleList(
          (0): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=80, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (1): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (2): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
          (3): MLP(
            (linears): ModuleList(
              (0): Linear(in_features=64, out_features=40, bias=True)
              (1): Linear(in_features=40, out_features=16, bias=True)
            )
          )
        )
      )
      (translate_mlp): MLP(
        (linears): ModuleList(
          (0): Linear(in_features=36, out_features=8, bias=True)
          (1): Linear(in_features=8, out_features=8, bias=True)
          (2): Linear(in_features=8, out_features=2, bias=True)
        )
        (batch_norms): ModuleList(
          (0): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (1): BatchNorm1d(8, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (cond_layers): ModuleList(
          (0): ConditionalLayer1d()
          (1): ConditionalLayer1d()
        )
      )
    )
  )
  (final_read_score): MLP(
    (linears): ModuleList(
      (0): Linear(in_features=18, out_features=36, bias=True)
      (1): Linear(in_features=36, out_features=36, bias=True)
      (2): Linear(in_features=36, out_features=1, bias=True)
    )
    (cond_layers): ModuleList(
      (0): ConditionalLayer1d()
      (1): ConditionalLayer1d()
    )
  )
)
| 05-08 12:42:26 Parameters: 
gnn_list.0.multi_channel_gnn_module.eps ........................................................................ torch.Size([4])
gnn_list.0.multi_channel_gnn_module.linear_prediction.0.0.weight .......................................... torch.Size([32, 11])
gnn_list.0.multi_channel_gnn_module.linear_prediction.0.0.bias ................................................ torch.Size([32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.0.2.weight .......................................... torch.Size([16, 32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.0.2.bias ................................................ torch.Size([16])
gnn_list.0.multi_channel_gnn_module.linear_prediction.1.0.weight .......................................... torch.Size([32, 16])
gnn_list.0.multi_channel_gnn_module.linear_prediction.1.0.bias ................................................ torch.Size([32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.1.2.weight .......................................... torch.Size([16, 32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.1.2.bias ................................................ torch.Size([16])
gnn_list.0.multi_channel_gnn_module.linear_prediction.2.0.weight .......................................... torch.Size([32, 16])
gnn_list.0.multi_channel_gnn_module.linear_prediction.2.0.bias ................................................ torch.Size([32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.2.2.weight .......................................... torch.Size([16, 32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.2.2.bias ................................................ torch.Size([16])
gnn_list.0.multi_channel_gnn_module.linear_prediction.3.0.weight .......................................... torch.Size([32, 16])
gnn_list.0.multi_channel_gnn_module.linear_prediction.3.0.bias ................................................ torch.Size([32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.3.2.weight .......................................... torch.Size([16, 32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.3.2.bias ................................................ torch.Size([16])
gnn_list.0.multi_channel_gnn_module.linear_prediction.4.0.weight .......................................... torch.Size([32, 16])
gnn_list.0.multi_channel_gnn_module.linear_prediction.4.0.bias ................................................ torch.Size([32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.4.2.weight .......................................... torch.Size([16, 32])
gnn_list.0.multi_channel_gnn_module.linear_prediction.4.2.bias ................................................ torch.Size([16])
gnn_list.0.multi_channel_gnn_module.layers.0.linears.0.weight ............................................. torch.Size([32, 22])
gnn_list.0.multi_channel_gnn_module.layers.0.linears.0.bias ................................................... torch.Size([32])
gnn_list.0.multi_channel_gnn_module.layers.0.linears.1.weight ............................................. torch.Size([16, 32])
gnn_list.0.multi_channel_gnn_module.layers.0.linears.1.bias ................................................... torch.Size([16])
gnn_list.0.multi_channel_gnn_module.layers.1.linears.0.weight ............................................. torch.Size([32, 32])
gnn_list.0.multi_channel_gnn_module.layers.1.linears.0.bias ................................................... torch.Size([32])
gnn_list.0.multi_channel_gnn_module.layers.1.linears.1.weight ............................................. torch.Size([16, 32])
gnn_list.0.multi_channel_gnn_module.layers.1.linears.1.bias ................................................... torch.Size([16])
gnn_list.0.multi_channel_gnn_module.layers.2.linears.0.weight ............................................. torch.Size([32, 32])
gnn_list.0.multi_channel_gnn_module.layers.2.linears.0.bias ................................................... torch.Size([32])
gnn_list.0.multi_channel_gnn_module.layers.2.linears.1.weight ............................................. torch.Size([16, 32])
gnn_list.0.multi_channel_gnn_module.layers.2.linears.1.bias ................................................... torch.Size([16])
gnn_list.0.multi_channel_gnn_module.layers.3.linears.0.weight ............................................. torch.Size([32, 32])
gnn_list.0.multi_channel_gnn_module.layers.3.linears.0.bias ................................................... torch.Size([32])
gnn_list.0.multi_channel_gnn_module.layers.3.linears.1.weight ............................................. torch.Size([16, 32])
gnn_list.0.multi_channel_gnn_module.layers.3.linears.1.bias ................................................... torch.Size([16])
gnn_list.0.translate_mlp.linears.0.weight .................................................................. torch.Size([4, 34])
gnn_list.0.translate_mlp.linears.0.bias ........................................................................ torch.Size([4])
gnn_list.0.translate_mlp.linears.1.weight ................................................................... torch.Size([4, 4])
gnn_list.0.translate_mlp.linears.1.bias ........................................................................ torch.Size([4])
gnn_list.0.translate_mlp.linears.2.weight ................................................................... torch.Size([2, 4])
gnn_list.0.translate_mlp.linears.2.bias ........................................................................ torch.Size([2])
gnn_list.0.translate_mlp.batch_norms.0.weight .................................................................. torch.Size([4])
gnn_list.0.translate_mlp.batch_norms.0.bias .................................................................... torch.Size([4])
gnn_list.0.translate_mlp.batch_norms.1.weight .................................................................. torch.Size([4])
gnn_list.0.translate_mlp.batch_norms.1.bias .................................................................... torch.Size([4])
gnn_list.0.translate_mlp.cond_layers.0.gain .............................................................. torch.Size([6, 1, 4])
gnn_list.0.translate_mlp.cond_layers.0.bias .............................................................. torch.Size([6, 1, 4])
gnn_list.0.translate_mlp.cond_layers.1.gain .............................................................. torch.Size([6, 1, 4])
gnn_list.0.translate_mlp.cond_layers.1.bias .............................................................. torch.Size([6, 1, 4])
gnn_list.1.multi_channel_gnn_module.eps ........................................................................ torch.Size([4])
gnn_list.1.multi_channel_gnn_module.linear_prediction.0.0.weight .......................................... torch.Size([36, 18])
gnn_list.1.multi_channel_gnn_module.linear_prediction.0.0.bias ................................................ torch.Size([36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.0.2.weight .......................................... torch.Size([16, 36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.0.2.bias ................................................ torch.Size([16])
gnn_list.1.multi_channel_gnn_module.linear_prediction.1.0.weight .......................................... torch.Size([36, 16])
gnn_list.1.multi_channel_gnn_module.linear_prediction.1.0.bias ................................................ torch.Size([36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.1.2.weight .......................................... torch.Size([16, 36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.1.2.bias ................................................ torch.Size([16])
gnn_list.1.multi_channel_gnn_module.linear_prediction.2.0.weight .......................................... torch.Size([36, 16])
gnn_list.1.multi_channel_gnn_module.linear_prediction.2.0.bias ................................................ torch.Size([36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.2.2.weight .......................................... torch.Size([16, 36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.2.2.bias ................................................ torch.Size([16])
gnn_list.1.multi_channel_gnn_module.linear_prediction.3.0.weight .......................................... torch.Size([36, 16])
gnn_list.1.multi_channel_gnn_module.linear_prediction.3.0.bias ................................................ torch.Size([36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.3.2.weight .......................................... torch.Size([16, 36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.3.2.bias ................................................ torch.Size([16])
gnn_list.1.multi_channel_gnn_module.linear_prediction.4.0.weight .......................................... torch.Size([36, 16])
gnn_list.1.multi_channel_gnn_module.linear_prediction.4.0.bias ................................................ torch.Size([36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.4.2.weight .......................................... torch.Size([16, 36])
gnn_list.1.multi_channel_gnn_module.linear_prediction.4.2.bias ................................................ torch.Size([16])
gnn_list.1.multi_channel_gnn_module.layers.0.linears.0.weight ............................................. torch.Size([36, 36])
gnn_list.1.multi_channel_gnn_module.layers.0.linears.0.bias ................................................... torch.Size([36])
gnn_list.1.multi_channel_gnn_module.layers.0.linears.1.weight ............................................. torch.Size([16, 36])
gnn_list.1.multi_channel_gnn_module.layers.0.linears.1.bias ................................................... torch.Size([16])
gnn_list.1.multi_channel_gnn_module.layers.1.linears.0.weight ............................................. torch.Size([36, 32])
gnn_list.1.multi_channel_gnn_module.layers.1.linears.0.bias ................................................... torch.Size([36])
gnn_list.1.multi_channel_gnn_module.layers.1.linears.1.weight ............................................. torch.Size([16, 36])
gnn_list.1.multi_channel_gnn_module.layers.1.linears.1.bias ................................................... torch.Size([16])
gnn_list.1.multi_channel_gnn_module.layers.2.linears.0.weight ............................................. torch.Size([36, 32])
gnn_list.1.multi_channel_gnn_module.layers.2.linears.0.bias ................................................... torch.Size([36])
gnn_list.1.multi_channel_gnn_module.layers.2.linears.1.weight ............................................. torch.Size([16, 36])
gnn_list.1.multi_channel_gnn_module.layers.2.linears.1.bias ................................................... torch.Size([16])
gnn_list.1.multi_channel_gnn_module.layers.3.linears.0.weight ............................................. torch.Size([36, 32])
gnn_list.1.multi_channel_gnn_module.layers.3.linears.0.bias ................................................... torch.Size([36])
gnn_list.1.multi_channel_gnn_module.layers.3.linears.1.weight ............................................. torch.Size([16, 36])
gnn_list.1.multi_channel_gnn_module.layers.3.linears.1.bias ................................................... torch.Size([16])
gnn_list.1.translate_mlp.linears.0.weight .................................................................. torch.Size([8, 34])
gnn_list.1.translate_mlp.linears.0.bias ........................................................................ torch.Size([8])
gnn_list.1.translate_mlp.linears.1.weight ................................................................... torch.Size([8, 8])
gnn_list.1.translate_mlp.linears.1.bias ........................................................................ torch.Size([8])
gnn_list.1.translate_mlp.linears.2.weight ................................................................... torch.Size([4, 8])
gnn_list.1.translate_mlp.linears.2.bias ........................................................................ torch.Size([4])
gnn_list.1.translate_mlp.batch_norms.0.weight .................................................................. torch.Size([8])
gnn_list.1.translate_mlp.batch_norms.0.bias .................................................................... torch.Size([8])
gnn_list.1.translate_mlp.batch_norms.1.weight .................................................................. torch.Size([8])
gnn_list.1.translate_mlp.batch_norms.1.bias .................................................................... torch.Size([8])
gnn_list.1.translate_mlp.cond_layers.0.gain .............................................................. torch.Size([6, 1, 8])
gnn_list.1.translate_mlp.cond_layers.0.bias .............................................................. torch.Size([6, 1, 8])
gnn_list.1.translate_mlp.cond_layers.1.gain .............................................................. torch.Size([6, 1, 8])
gnn_list.1.translate_mlp.cond_layers.1.bias .............................................................. torch.Size([6, 1, 8])
gnn_list.2.multi_channel_gnn_module.eps ........................................................................ torch.Size([4])
gnn_list.2.multi_channel_gnn_module.linear_prediction.0.0.weight .......................................... torch.Size([40, 20])
gnn_list.2.multi_channel_gnn_module.linear_prediction.0.0.bias ................................................ torch.Size([40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.0.2.weight .......................................... torch.Size([16, 40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.0.2.bias ................................................ torch.Size([16])
gnn_list.2.multi_channel_gnn_module.linear_prediction.1.0.weight .......................................... torch.Size([40, 16])
gnn_list.2.multi_channel_gnn_module.linear_prediction.1.0.bias ................................................ torch.Size([40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.1.2.weight .......................................... torch.Size([16, 40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.1.2.bias ................................................ torch.Size([16])
gnn_list.2.multi_channel_gnn_module.linear_prediction.2.0.weight .......................................... torch.Size([40, 16])
gnn_list.2.multi_channel_gnn_module.linear_prediction.2.0.bias ................................................ torch.Size([40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.2.2.weight .......................................... torch.Size([16, 40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.2.2.bias ................................................ torch.Size([16])
gnn_list.2.multi_channel_gnn_module.linear_prediction.3.0.weight .......................................... torch.Size([40, 16])
gnn_list.2.multi_channel_gnn_module.linear_prediction.3.0.bias ................................................ torch.Size([40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.3.2.weight .......................................... torch.Size([16, 40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.3.2.bias ................................................ torch.Size([16])
gnn_list.2.multi_channel_gnn_module.linear_prediction.4.0.weight .......................................... torch.Size([40, 16])
gnn_list.2.multi_channel_gnn_module.linear_prediction.4.0.bias ................................................ torch.Size([40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.4.2.weight .......................................... torch.Size([16, 40])
gnn_list.2.multi_channel_gnn_module.linear_prediction.4.2.bias ................................................ torch.Size([16])
gnn_list.2.multi_channel_gnn_module.layers.0.linears.0.weight ............................................. torch.Size([40, 80])
gnn_list.2.multi_channel_gnn_module.layers.0.linears.0.bias ................................................... torch.Size([40])
gnn_list.2.multi_channel_gnn_module.layers.0.linears.1.weight ............................................. torch.Size([16, 40])
gnn_list.2.multi_channel_gnn_module.layers.0.linears.1.bias ................................................... torch.Size([16])
gnn_list.2.multi_channel_gnn_module.layers.1.linears.0.weight ............................................. torch.Size([40, 64])
gnn_list.2.multi_channel_gnn_module.layers.1.linears.0.bias ................................................... torch.Size([40])
gnn_list.2.multi_channel_gnn_module.layers.1.linears.1.weight ............................................. torch.Size([16, 40])
gnn_list.2.multi_channel_gnn_module.layers.1.linears.1.bias ................................................... torch.Size([16])
gnn_list.2.multi_channel_gnn_module.layers.2.linears.0.weight ............................................. torch.Size([40, 64])
gnn_list.2.multi_channel_gnn_module.layers.2.linears.0.bias ................................................... torch.Size([40])
gnn_list.2.multi_channel_gnn_module.layers.2.linears.1.weight ............................................. torch.Size([16, 40])
gnn_list.2.multi_channel_gnn_module.layers.2.linears.1.bias ................................................... torch.Size([16])
gnn_list.2.multi_channel_gnn_module.layers.3.linears.0.weight ............................................. torch.Size([40, 64])
gnn_list.2.multi_channel_gnn_module.layers.3.linears.0.bias ................................................... torch.Size([40])
gnn_list.2.multi_channel_gnn_module.layers.3.linears.1.weight ............................................. torch.Size([16, 40])
gnn_list.2.multi_channel_gnn_module.layers.3.linears.1.bias ................................................... torch.Size([16])
gnn_list.2.translate_mlp.linears.0.weight .................................................................. torch.Size([8, 36])
gnn_list.2.translate_mlp.linears.0.bias ........................................................................ torch.Size([8])
gnn_list.2.translate_mlp.linears.1.weight ................................................................... torch.Size([8, 8])
gnn_list.2.translate_mlp.linears.1.bias ........................................................................ torch.Size([8])
gnn_list.2.translate_mlp.linears.2.weight ................................................................... torch.Size([4, 8])
gnn_list.2.translate_mlp.linears.2.bias ........................................................................ torch.Size([4])
gnn_list.2.translate_mlp.batch_norms.0.weight .................................................................. torch.Size([8])
gnn_list.2.translate_mlp.batch_norms.0.bias .................................................................... torch.Size([8])
gnn_list.2.translate_mlp.batch_norms.1.weight .................................................................. torch.Size([8])
gnn_list.2.translate_mlp.batch_norms.1.bias .................................................................... torch.Size([8])
gnn_list.2.translate_mlp.cond_layers.0.gain .............................................................. torch.Size([6, 1, 8])
gnn_list.2.translate_mlp.cond_layers.0.bias .............................................................. torch.Size([6, 1, 8])
gnn_list.2.translate_mlp.cond_layers.1.gain .............................................................. torch.Size([6, 1, 8])
gnn_list.2.translate_mlp.cond_layers.1.bias .............................................................. torch.Size([6, 1, 8])
gnn_list.3.multi_channel_gnn_module.eps ........................................................................ torch.Size([4])
gnn_list.3.multi_channel_gnn_module.linear_prediction.0.0.weight .......................................... torch.Size([40, 20])
gnn_list.3.multi_channel_gnn_module.linear_prediction.0.0.bias ................................................ torch.Size([40])
gnn_list.3.multi_channel_gnn_module.linear_prediction.0.2.weight .......................................... torch.Size([16, 40])
gnn_list.3.multi_channel_gnn_module.linear_prediction.0.2.bias ................................................ torch.Size([16])
gnn_list.3.multi_channel_gnn_module.linear_prediction.1.0.weight .......................................... torch.Size([40, 16])
gnn_list.3.multi_channel_gnn_module.linear_prediction.1.0.bias ................................................ torch.Size([40])
gnn_list.3.multi_channel_gnn_module.linear_prediction.1.2.weight .......................................... torch.Size([16, 40])
gnn_list.3.multi_channel_gnn_module.linear_prediction.1.2.bias ................................................ torch.Size([16])
gnn_list.3.multi_channel_gnn_module.linear_prediction.2.0.weight .......................................... torch.Size([40, 16])
gnn_list.3.multi_channel_gnn_module.linear_prediction.2.0.bias ................................................ torch.Size([40])
gnn_list.3.multi_channel_gnn_module.linear_prediction.2.2.weight .......................................... torch.Size([16, 40])
gnn_list.3.multi_channel_gnn_module.linear_prediction.2.2.bias ................................................ torch.Size([16])
gnn_list.3.multi_channel_gnn_module.linear_prediction.3.0.weight .......................................... torch.Size([40, 16])
gnn_list.3.multi_channel_gnn_module.linear_prediction.3.0.bias ................................................ torch.Size([40])
gnn_list.3.multi_channel_gnn_module.linear_prediction.3.2.weight .......................................... torch.Size([16, 40])
gnn_list.3.multi_channel_gnn_module.linear_prediction.3.2.bias ................................................ torch.Size([16])
gnn_list.3.multi_channel_gnn_module.linear_prediction.4.0.weight .......................................... torch.Size([40, 16])
gnn_list.3.multi_channel_gnn_module.linear_prediction.4.0.bias ................................................ torch.Size([40])
gnn_list.3.multi_channel_gnn_module.linear_prediction.4.2.weight .......................................... torch.Size([16, 40])
gnn_list.3.multi_channel_gnn_module.linear_prediction.4.2.bias ................................................ torch.Size([16])
gnn_list.3.multi_channel_gnn_module.layers.0.linears.0.weight ............................................. torch.Size([40, 80])
gnn_list.3.multi_channel_gnn_module.layers.0.linears.0.bias ................................................... torch.Size([40])
gnn_list.3.multi_channel_gnn_module.layers.0.linears.1.weight ............................................. torch.Size([16, 40])
gnn_list.3.multi_channel_gnn_module.layers.0.linears.1.bias ................................................... torch.Size([16])
gnn_list.3.multi_channel_gnn_module.layers.1.linears.0.weight ............................................. torch.Size([40, 64])
gnn_list.3.multi_channel_gnn_module.layers.1.linears.0.bias ................................................... torch.Size([40])
gnn_list.3.multi_channel_gnn_module.layers.1.linears.1.weight ............................................. torch.Size([16, 40])
gnn_list.3.multi_channel_gnn_module.layers.1.linears.1.bias ................................................... torch.Size([16])
gnn_list.3.multi_channel_gnn_module.layers.2.linears.0.weight ............................................. torch.Size([40, 64])
gnn_list.3.multi_channel_gnn_module.layers.2.linears.0.bias ................................................... torch.Size([40])
gnn_list.3.multi_channel_gnn_module.layers.2.linears.1.weight ............................................. torch.Size([16, 40])
gnn_list.3.multi_channel_gnn_module.layers.2.linears.1.bias ................................................... torch.Size([16])
gnn_list.3.multi_channel_gnn_module.layers.3.linears.0.weight ............................................. torch.Size([40, 64])
gnn_list.3.multi_channel_gnn_module.layers.3.linears.0.bias ................................................... torch.Size([40])
gnn_list.3.multi_channel_gnn_module.layers.3.linears.1.weight ............................................. torch.Size([16, 40])
gnn_list.3.multi_channel_gnn_module.layers.3.linears.1.bias ................................................... torch.Size([16])
gnn_list.3.translate_mlp.linears.0.weight .................................................................. torch.Size([8, 36])
gnn_list.3.translate_mlp.linears.0.bias ........................................................................ torch.Size([8])
gnn_list.3.translate_mlp.linears.1.weight ................................................................... torch.Size([8, 8])
gnn_list.3.translate_mlp.linears.1.bias ........................................................................ torch.Size([8])
gnn_list.3.translate_mlp.linears.2.weight ................................................................... torch.Size([4, 8])
gnn_list.3.translate_mlp.linears.2.bias ........................................................................ torch.Size([4])
gnn_list.3.translate_mlp.batch_norms.0.weight .................................................................. torch.Size([8])
gnn_list.3.translate_mlp.batch_norms.0.bias .................................................................... torch.Size([8])
gnn_list.3.translate_mlp.batch_norms.1.weight .................................................................. torch.Size([8])
gnn_list.3.translate_mlp.batch_norms.1.bias .................................................................... torch.Size([8])
gnn_list.3.translate_mlp.cond_layers.0.gain .............................................................. torch.Size([6, 1, 8])
gnn_list.3.translate_mlp.cond_layers.0.bias .............................................................. torch.Size([6, 1, 8])
gnn_list.3.translate_mlp.cond_layers.1.gain .............................................................. torch.Size([6, 1, 8])
gnn_list.3.translate_mlp.cond_layers.1.bias .............................................................. torch.Size([6, 1, 8])
gnn_list.4.multi_channel_gnn_module.eps ........................................................................ torch.Size([4])
gnn_list.4.multi_channel_gnn_module.linear_prediction.0.0.weight .......................................... torch.Size([40, 20])
gnn_list.4.multi_channel_gnn_module.linear_prediction.0.0.bias ................................................ torch.Size([40])
gnn_list.4.multi_channel_gnn_module.linear_prediction.0.2.weight .......................................... torch.Size([16, 40])
gnn_list.4.multi_channel_gnn_module.linear_prediction.0.2.bias ................................................ torch.Size([16])
gnn_list.4.multi_channel_gnn_module.linear_prediction.1.0.weight .......................................... torch.Size([40, 16])
gnn_list.4.multi_channel_gnn_module.linear_prediction.1.0.bias ................................................ torch.Size([40])
gnn_list.4.multi_channel_gnn_module.linear_prediction.1.2.weight .......................................... torch.Size([16, 40])
gnn_list.4.multi_channel_gnn_module.linear_prediction.1.2.bias ................................................ torch.Size([16])
gnn_list.4.multi_channel_gnn_module.linear_prediction.2.0.weight .......................................... torch.Size([40, 16])
gnn_list.4.multi_channel_gnn_module.linear_prediction.2.0.bias ................................................ torch.Size([40])
gnn_list.4.multi_channel_gnn_module.linear_prediction.2.2.weight .......................................... torch.Size([16, 40])
gnn_list.4.multi_channel_gnn_module.linear_prediction.2.2.bias ................................................ torch.Size([16])
gnn_list.4.multi_channel_gnn_module.linear_prediction.3.0.weight .......................................... torch.Size([40, 16])
gnn_list.4.multi_channel_gnn_module.linear_prediction.3.0.bias ................................................ torch.Size([40])
gnn_list.4.multi_channel_gnn_module.linear_prediction.3.2.weight .......................................... torch.Size([16, 40])
gnn_list.4.multi_channel_gnn_module.linear_prediction.3.2.bias ................................................ torch.Size([16])
gnn_list.4.multi_channel_gnn_module.linear_prediction.4.0.weight .......................................... torch.Size([40, 16])
gnn_list.4.multi_channel_gnn_module.linear_prediction.4.0.bias ................................................ torch.Size([40])
gnn_list.4.multi_channel_gnn_module.linear_prediction.4.2.weight .......................................... torch.Size([16, 40])
gnn_list.4.multi_channel_gnn_module.linear_prediction.4.2.bias ................................................ torch.Size([16])
gnn_list.4.multi_channel_gnn_module.layers.0.linears.0.weight ............................................. torch.Size([40, 80])
gnn_list.4.multi_channel_gnn_module.layers.0.linears.0.bias ................................................... torch.Size([40])
gnn_list.4.multi_channel_gnn_module.layers.0.linears.1.weight ............................................. torch.Size([16, 40])
gnn_list.4.multi_channel_gnn_module.layers.0.linears.1.bias ................................................... torch.Size([16])
gnn_list.4.multi_channel_gnn_module.layers.1.linears.0.weight ............................................. torch.Size([40, 64])
gnn_list.4.multi_channel_gnn_module.layers.1.linears.0.bias ................................................... torch.Size([40])
gnn_list.4.multi_channel_gnn_module.layers.1.linears.1.weight ............................................. torch.Size([16, 40])
gnn_list.4.multi_channel_gnn_module.layers.1.linears.1.bias ................................................... torch.Size([16])
gnn_list.4.multi_channel_gnn_module.layers.2.linears.0.weight ............................................. torch.Size([40, 64])
gnn_list.4.multi_channel_gnn_module.layers.2.linears.0.bias ................................................... torch.Size([40])
gnn_list.4.multi_channel_gnn_module.layers.2.linears.1.weight ............................................. torch.Size([16, 40])
gnn_list.4.multi_channel_gnn_module.layers.2.linears.1.bias ................................................... torch.Size([16])
gnn_list.4.multi_channel_gnn_module.layers.3.linears.0.weight ............................................. torch.Size([40, 64])
gnn_list.4.multi_channel_gnn_module.layers.3.linears.0.bias ................................................... torch.Size([40])
gnn_list.4.multi_channel_gnn_module.layers.3.linears.1.weight ............................................. torch.Size([16, 40])
gnn_list.4.multi_channel_gnn_module.layers.3.linears.1.bias ................................................... torch.Size([16])
gnn_list.4.translate_mlp.linears.0.weight .................................................................. torch.Size([8, 36])
gnn_list.4.translate_mlp.linears.0.bias ........................................................................ torch.Size([8])
gnn_list.4.translate_mlp.linears.1.weight ................................................................... torch.Size([8, 8])
gnn_list.4.translate_mlp.linears.1.bias ........................................................................ torch.Size([8])
gnn_list.4.translate_mlp.linears.2.weight ................................................................... torch.Size([2, 8])
gnn_list.4.translate_mlp.linears.2.bias ........................................................................ torch.Size([2])
gnn_list.4.translate_mlp.batch_norms.0.weight .................................................................. torch.Size([8])
gnn_list.4.translate_mlp.batch_norms.0.bias .................................................................... torch.Size([8])
gnn_list.4.translate_mlp.batch_norms.1.weight .................................................................. torch.Size([8])
gnn_list.4.translate_mlp.batch_norms.1.bias .................................................................... torch.Size([8])
gnn_list.4.translate_mlp.cond_layers.0.gain .............................................................. torch.Size([6, 1, 8])
gnn_list.4.translate_mlp.cond_layers.0.bias .............................................................. torch.Size([6, 1, 8])
gnn_list.4.translate_mlp.cond_layers.1.gain .............................................................. torch.Size([6, 1, 8])
gnn_list.4.translate_mlp.cond_layers.1.bias .............................................................. torch.Size([6, 1, 8])
final_read_score.linears.0.weight ......................................................................... torch.Size([36, 18])
final_read_score.linears.0.bias ............................................................................... torch.Size([36])
final_read_score.linears.1.weight ......................................................................... torch.Size([36, 36])
final_read_score.linears.1.bias ............................................................................... torch.Size([36])
final_read_score.linears.2.weight .......................................................................... torch.Size([1, 36])
final_read_score.linears.2.bias ................................................................................ torch.Size([1])
final_read_score.cond_layers.0.gain ..................................................................... torch.Size([6, 1, 36])
final_read_score.cond_layers.0.bias ..................................................................... torch.Size([6, 1, 36])
final_read_score.cond_layers.1.gain ..................................................................... torch.Size([6, 1, 36])
final_read_score.cond_layers.1.bias ..................................................................... torch.Size([6, 1, 36])
| 05-08 12:42:26 Parameters Count: 91781, Trainable: 91781
| 05-08 12:42:26 [0.1, 0.2, 0.4, 0.6, 0.8, 1.6], 0.0
